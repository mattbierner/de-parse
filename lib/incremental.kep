/**
 * @fileOverview Running parsers incrementally.
 */
package (
// Operations
    provide,
    provideString,
    finish,
    
// Incremental Parser Running
    parseIncState,
    parseInc,

    runIncState,
    runInc,

// Many Parser running
    runManyState,
    runManyStream,
    runMany)
with
    import 'parse/parse' {
        appk,
        always,
        bind,
        getParserState,
        Memoer,
        next,
        optional,
        parseState,
        ParserState,
        Position,
        runState,
        trampoline},
    import 'nu/stream' stream{
        'from': streamFrom,
        isEmpty,
        first,
        NIL,
        rest,
        memoStream}
in {

/* Records
 ******************************************************************************/
// Request
////////////////////////////////////////
var Request = function(chunk, k) {
    this.chunk = chunk;
    this.k = k;
};

// Session
////////////////////////////////////////
var Session = function(done, k, chunks) {
    this.done = done;
    this.k = k;
    this.chunks = chunks;
};

Session.prototype.addChunk = \c ->
    new Session(
        this.done,
        this.k,
        this.chunks.concat(c));

Session.prototype.hasChunk = \c ->
    (c < this.chunks.length);

Session.prototype.getChunk = \c ->
    this.chunks[c];

/* IncrementalState
 ******************************************************************************/
/**
 * State for an incremental parser.
 * 
 * Forwards all operations to an inner state.
 * 
 * @param chunk Identifier for the chunk the state is currently operating on.
 * @param state Inner parser state.
 */
var IncrementalState = function(chunk, state) {
    this.chunk = chunk;
    this.state = state;
};

Object.defineProperties(IncrementalState.prototype, {
    'input': {
        'get': \() -> this.state.input
    },
    'position': {
        'get': \() -> this.state.position
    },
    'userState': {
        'get': \() -> this.state.userState
    }
});

IncrementalState.prototype.eq = \other ->
    other && other.chunk === this.chunk && this.state.eq(other.state);

IncrementalState.prototype.isEmpty = \() ->
    this.state.isEmpty();

IncrementalState.prototype.first = \() ->
    this.state.first();

IncrementalState.prototype.next = \x -> {
    if (!this._next) {
        var chunk = this.chunk;
        
        this._next = bind(
            next(this.state.next(x), getParserState),
            \innerState ->
                (innerState.isEmpty() ?
                    \_, m, cok ->
                        new Request(
                            chunk + 1,
                            \i -> appk(cok, x, new IncrementalState(chunk + 1, innerState.setInput(i)), m)) :
                    let state = new IncrementalState(chunk, innerState) in
                        \_, m, cok -> appk(cok, x, state, m)));
    }
    return this._next;
};

IncrementalState.prototype.setInput = \input ->
    new IncrementalState(
        this.chunk,
        this.state.setInput(input));

IncrementalState.prototype.setPosition = \position ->
    new IncrementalState(
        this.chunk,
        this.state.setPosition(position));

IncrementalState.prototype.setUserState = \userState ->
    new IncrementalState(
        this.chunk,
        this.state.setUserState(userState));

/* Operations
 ******************************************************************************/
/**
 * Always add any chunk passed in, even empty ones.
 */
var forceProvide = \r, c -> {
    if (r.done)
        return r;
    
    var r2 = r.addChunk(c);
    
    var result = r2.k(c) |> trampoline;
    while (result instanceof Request && r2.hasChunk(result.chunk))
        result = result.k(r2.getChunk(result.chunk)) |> trampoline;
    
    return (result instanceof Request ?
        new Session(false, result.k, r2.chunks) :
        result);
};

/**
 * Feed a new chunk of input to an incremental parser.
 * 
 * Will parse as much as possible before returning.
 * 
 * @param r Resumable state
 * @param c Nu stream of input for chunk.
 * 
 * @return New resumable state for parser after input has been received.
 */
provide = \r, c ->
    (isEmpty(c) ?
        r :
        forceProvide(r, c));

/**
 * Feed an array-like to an incremental parser.
 * 
 * @param r Resumable state.
 * @param input Array like object of input.
 */
provideString = \r, input ->
    provide(r, streamFrom(input));

/**
 * Signal that an incremental parsing is complete.
 * 
 * Returns the result of the parsing.
 * 
 * @param r Resumable state.
 */
finish = let
    complete = \r -> r.k()
in
     \r -> complete(forceProvide(r, NIL));

/* Incremental Creation
 ******************************************************************************/
/** 
 * Begin incremental parsing for `p` with a custom inner state.
 * 
 * @param p Parser.
 * @param state Inner parser state.
 * @param ok Success continuation.
 * @param err Error continuation.
 * 
 * @return Opaque state object for a partially evaluated parser.
 */
parseIncState = \p, state, ok, err -> let 
    pok = \x, s -> new Session(true, (ok, x, s)),
    perr = \x, s -> new Session(true, (err, x, s))
in
    provide(
        new Session(
            false,
            \i -> parseState(p, new IncrementalState(0, state.setInput(i)), pok, perr),
            []),
        state.input);

/**
 * Begin incrementally parsing `p`.
 * 
 * @param p Parser.
 * @param [ud] User data.
 * 
 * @see parseIncState
 */
parseInc = \p, ud, ok, err ->
    parseIncState(
        p,
        new ParserState(NIL, Position.initial, ud),
        ok,
        err);

/**
 * Begin incrementally parsing `p`
 * 
 * Returns successful results directly, throws error results.
 * 
 * @param p Parser.
 * @param state State.
 */
runIncState = let
    ok = \x -> x,
    err = \x -> { throw x; }
in
    \p, state -> 
        parseIncState(p, state, ok, err);

/**
 * Begin incrementally parsing `p`.
 * 
 * @param p Parser.
 * @param ud User data.
 */
runInc = \p, ud ->
    runIncState(
        p,
        new ParserState(
            NIL,
            Position.initial,
            ud));

/* Run Many
 ******************************************************************************/
/**
 * Run parser 'p' zero or more times to produce a lazy stream of results.
 * 
 * Similar in operation to the 'many' parser, but is not a
 * combinatorial parser.
 * 
 * Result may be an infinite stream.
 * 
 * @param p Parser to run zero or more times.
 * @param state State to run parser against.
 * 
 * @return Lazy stream of results.
 */
runManyState = \p, state -> let
    manyP = optional(NIL,
        bind(p, \x, state, m ->
            always(memoStream(x, (runState, manyP, state, m)))))
in
    runState(manyP, state);

/**
 * Run parser 'p' zero or more times to produce a lazy stream or results.
 * 
 * Supplies own state.
 * 
 * @param p Parser to run.
 * @param s Nu style stream supporting first and rest.
 * @param [ud] User data.
 *
 * @see runManyState
 */
runManyStream = \p, s, ud ->
    runManyState(p, new ParserState(s, Position.initial, ud));

/**
 * Run parser 'p' zero or more times against an input string to produce a lazy
 * stream or results.
 * 
 * @param p Parser to run.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.
 *
 * @see runManyStream
 */
runMany = \p, input, ud ->
    runManyStream(p, streamFrom(input), ud);

}